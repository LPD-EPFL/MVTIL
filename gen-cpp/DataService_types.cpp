/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TxProtocol {

int _kOperationValues[] = {
  Operation::READ,
  Operation::WRITE
};
const char* _kOperationNames[] = {
  "READ",
  "WRITE"
};
const std::map<int, const char*> _Operation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOperationValues, _kOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOperationStateValues[] = {
  OperationState::FAIL_NO_VERSION,
  OperationState::FAIL_READ_MARK_LARGE,
  OperationState::FAIL_INTERSECTION_EMPTY,
  OperationState::FAIL_TIMEOUT,
  OperationState::WRITES_NOT_FOUND,
  OperationState::R_LOCK_SUCCESS,
  OperationState::W_LOCK_SUCCESS,
  OperationState::COMMIT_OK,
  OperationState::ABORT_OK,
  OperationState::ERROR,
  OperationState::NOT_IMPLEMENTED,
  OperationState::FAIL_PENDING_VERSION
};
const char* _kOperationStateNames[] = {
  "FAIL_NO_VERSION",
  "FAIL_READ_MARK_LARGE",
  "FAIL_INTERSECTION_EMPTY",
  "FAIL_TIMEOUT",
  "WRITES_NOT_FOUND",
  "R_LOCK_SUCCESS",
  "W_LOCK_SUCCESS",
  "COMMIT_OK",
  "ABORT_OK",
  "ERROR",
  "NOT_IMPLEMENTED",
  "FAIL_PENDING_VERSION"
};
const std::map<int, const char*> _OperationState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kOperationStateValues, _kOperationStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TimestampInterval::~TimestampInterval() throw() {
}


void TimestampInterval::__set_start(const Timestamp val) {
  this->start = val;
}

void TimestampInterval::__set_finish(const Timestamp val) {
  this->finish = val;
}

uint32_t TimestampInterval::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finish);
          this->__isset.finish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimestampInterval::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimestampInterval");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimestampInterval &a, TimestampInterval &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.finish, b.finish);
  swap(a.__isset, b.__isset);
}

TimestampInterval::TimestampInterval(const TimestampInterval& other0) {
  start = other0.start;
  finish = other0.finish;
  __isset = other0.__isset;
}
TimestampInterval& TimestampInterval::operator=(const TimestampInterval& other1) {
  start = other1.start;
  finish = other1.finish;
  __isset = other1.__isset;
  return *this;
}
void TimestampInterval::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimestampInterval(";
  out << "start=" << to_string(start);
  out << ", " << "finish=" << to_string(finish);
  out << ")";
}


ClientGenericRequest::~ClientGenericRequest() throw() {
}


void ClientGenericRequest::__set_tid(const TransactionId val) {
  this->tid = val;
}

void ClientGenericRequest::__set_op(const Operation::type val) {
  this->op = val;
}

void ClientGenericRequest::__set_interval(const Timestamp val) {
  this->interval = val;
}

void ClientGenericRequest::__set_key(const Key& val) {
  this->key = val;
}

void ClientGenericRequest::__set_value(const Value& val) {
  this->value = val;
}

uint32_t ClientGenericRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->op = (Operation::type)ecast2;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientGenericRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientGenericRequest");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientGenericRequest &a, ClientGenericRequest &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.op, b.op);
  swap(a.interval, b.interval);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ClientGenericRequest::ClientGenericRequest(const ClientGenericRequest& other3) {
  tid = other3.tid;
  op = other3.op;
  interval = other3.interval;
  key = other3.key;
  value = other3.value;
  __isset = other3.__isset;
}
ClientGenericRequest& ClientGenericRequest::operator=(const ClientGenericRequest& other4) {
  tid = other4.tid;
  op = other4.op;
  interval = other4.interval;
  key = other4.key;
  value = other4.value;
  __isset = other4.__isset;
  return *this;
}
void ClientGenericRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientGenericRequest(";
  out << "tid=" << to_string(tid);
  out << ", " << "op=" << to_string(op);
  out << ", " << "interval=" << to_string(interval);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


ServerGenericReply::~ServerGenericReply() throw() {
}


void ServerGenericReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void ServerGenericReply::__set_op(const Operation::type val) {
  this->op = val;
}

void ServerGenericReply::__set_state(const OperationState::type val) {
  this->state = val;
}

void ServerGenericReply::__set_interval(const TimestampInterval& val) {
  this->interval = val;
}

void ServerGenericReply::__set_potential(const TimestampInterval& val) {
  this->potential = val;
}

void ServerGenericReply::__set_key(const std::string& val) {
  this->key = val;
}

void ServerGenericReply::__set_value(const std::string& val) {
  this->value = val;
}

uint32_t ServerGenericReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->op = (Operation::type)ecast5;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->state = (OperationState::type)ecast6;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->interval.read(iprot);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->potential.read(iprot);
          this->__isset.potential = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerGenericReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerGenericReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->interval.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("potential", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->potential.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerGenericReply &a, ServerGenericReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.op, b.op);
  swap(a.state, b.state);
  swap(a.interval, b.interval);
  swap(a.potential, b.potential);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ServerGenericReply::ServerGenericReply(const ServerGenericReply& other7) {
  tid = other7.tid;
  op = other7.op;
  state = other7.state;
  interval = other7.interval;
  potential = other7.potential;
  key = other7.key;
  value = other7.value;
  __isset = other7.__isset;
}
ServerGenericReply& ServerGenericReply::operator=(const ServerGenericReply& other8) {
  tid = other8.tid;
  op = other8.op;
  state = other8.state;
  interval = other8.interval;
  potential = other8.potential;
  key = other8.key;
  value = other8.value;
  __isset = other8.__isset;
  return *this;
}
void ServerGenericReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerGenericReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "op=" << to_string(op);
  out << ", " << "state=" << to_string(state);
  out << ", " << "interval=" << to_string(interval);
  out << ", " << "potential=" << to_string(potential);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


ReadReply::~ReadReply() throw() {
}


void ReadReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void ReadReply::__set_interval(const TimestampInterval& val) {
  this->interval = val;
}

void ReadReply::__set_potential(const TimestampInterval& val) {
  this->potential = val;
}

void ReadReply::__set_state(const OperationState::type val) {
  this->state = val;
}

void ReadReply::__set_key(const Key& val) {
  this->key = val;
}

void ReadReply::__set_value(const Value& val) {
  this->value = val;
}

uint32_t ReadReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->interval.read(iprot);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->potential.read(iprot);
          this->__isset.potential = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->state = (OperationState::type)ecast9;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReadReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReadReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->interval.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("potential", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->potential.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReadReply &a, ReadReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.interval, b.interval);
  swap(a.potential, b.potential);
  swap(a.state, b.state);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ReadReply::ReadReply(const ReadReply& other10) {
  tid = other10.tid;
  interval = other10.interval;
  potential = other10.potential;
  state = other10.state;
  key = other10.key;
  value = other10.value;
  __isset = other10.__isset;
}
ReadReply& ReadReply::operator=(const ReadReply& other11) {
  tid = other11.tid;
  interval = other11.interval;
  potential = other11.potential;
  state = other11.state;
  key = other11.key;
  value = other11.value;
  __isset = other11.__isset;
  return *this;
}
void ReadReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReadReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "interval=" << to_string(interval);
  out << ", " << "potential=" << to_string(potential);
  out << ", " << "state=" << to_string(state);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


WriteReply::~WriteReply() throw() {
}


void WriteReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void WriteReply::__set_interval(const TimestampInterval& val) {
  this->interval = val;
}

void WriteReply::__set_potential(const TimestampInterval& val) {
  this->potential = val;
}

void WriteReply::__set_state(const OperationState::type val) {
  this->state = val;
}

void WriteReply::__set_key(const Key& val) {
  this->key = val;
}

uint32_t WriteReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->interval.read(iprot);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->potential.read(iprot);
          this->__isset.potential = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->state = (OperationState::type)ecast12;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WriteReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WriteReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->interval.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("potential", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->potential.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WriteReply &a, WriteReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.interval, b.interval);
  swap(a.potential, b.potential);
  swap(a.state, b.state);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

WriteReply::WriteReply(const WriteReply& other13) {
  tid = other13.tid;
  interval = other13.interval;
  potential = other13.potential;
  state = other13.state;
  key = other13.key;
  __isset = other13.__isset;
}
WriteReply& WriteReply::operator=(const WriteReply& other14) {
  tid = other14.tid;
  interval = other14.interval;
  potential = other14.potential;
  state = other14.state;
  key = other14.key;
  __isset = other14.__isset;
  return *this;
}
void WriteReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "interval=" << to_string(interval);
  out << ", " << "potential=" << to_string(potential);
  out << ", " << "state=" << to_string(state);
  out << ", " << "key=" << to_string(key);
  out << ")";
}


CommitReply::~CommitReply() throw() {
}


void CommitReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void CommitReply::__set_state(const OperationState::type val) {
  this->state = val;
}

uint32_t CommitReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->state = (OperationState::type)ecast15;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommitReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommitReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommitReply &a, CommitReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

CommitReply::CommitReply(const CommitReply& other16) {
  tid = other16.tid;
  state = other16.state;
  __isset = other16.__isset;
}
CommitReply& CommitReply::operator=(const CommitReply& other17) {
  tid = other17.tid;
  state = other17.state;
  __isset = other17.__isset;
  return *this;
}
void CommitReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


AbortReply::~AbortReply() throw() {
}


void AbortReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void AbortReply::__set_state(const OperationState::type val) {
  this->state = val;
}

uint32_t AbortReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->state = (OperationState::type)ecast18;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AbortReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortReply &a, AbortReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

AbortReply::AbortReply(const AbortReply& other19) {
  tid = other19.tid;
  state = other19.state;
  __isset = other19.__isset;
}
AbortReply& AbortReply::operator=(const AbortReply& other20) {
  tid = other20.tid;
  state = other20.state;
  __isset = other20.__isset;
  return *this;
}
void AbortReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}

} // namespace
