/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataService_H
#define DataService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "DataService_types.h"

namespace TxProtocol {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DataServiceIf {
 public:
  virtual ~DataServiceIf() {}
  virtual void HandleAbort(AbortReply& _return, const TransactionId tid) = 0;
  virtual void HandleCommit(CommitReply& _return, const TransactionId tid, const Timestamp ts) = 0;
  virtual void HandleReadRequest(ReadReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k) = 0;
  virtual void HandleWriteRequest(WriteReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v) = 0;
  virtual void GarbageCollection(GCReply& _return, const Timestamp ts) = 0;
};

class DataServiceIfFactory {
 public:
  typedef DataServiceIf Handler;

  virtual ~DataServiceIfFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataServiceIf* /* handler */) = 0;
};

class DataServiceIfSingletonFactory : virtual public DataServiceIfFactory {
 public:
  DataServiceIfSingletonFactory(const boost::shared_ptr<DataServiceIf>& iface) : iface_(iface) {}
  virtual ~DataServiceIfSingletonFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataServiceIf> iface_;
};

class DataServiceNull : virtual public DataServiceIf {
 public:
  virtual ~DataServiceNull() {}
  void HandleAbort(AbortReply& /* _return */, const TransactionId /* tid */) {
    return;
  }
  void HandleCommit(CommitReply& /* _return */, const TransactionId /* tid */, const Timestamp /* ts */) {
    return;
  }
  void HandleReadRequest(ReadReply& /* _return */, const TransactionId /* tid */, const TimestampInterval& /* interval */, const Key& /* k */) {
    return;
  }
  void HandleWriteRequest(WriteReply& /* _return */, const TransactionId /* tid */, const TimestampInterval& /* interval */, const Key& /* k */, const Value& /* v */) {
    return;
  }
  void GarbageCollection(GCReply& /* _return */, const Timestamp /* ts */) {
    return;
  }
};

typedef struct _DataService_HandleAbort_args__isset {
  _DataService_HandleAbort_args__isset() : tid(false) {}
  bool tid :1;
} _DataService_HandleAbort_args__isset;

class DataService_HandleAbort_args {
 public:

  DataService_HandleAbort_args(const DataService_HandleAbort_args&);
  DataService_HandleAbort_args& operator=(const DataService_HandleAbort_args&);
  DataService_HandleAbort_args() : tid(0) {
  }

  virtual ~DataService_HandleAbort_args() throw();
  TransactionId tid;

  _DataService_HandleAbort_args__isset __isset;

  void __set_tid(const TransactionId val);

  bool operator == (const DataService_HandleAbort_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleAbort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleAbort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_HandleAbort_pargs {
 public:


  virtual ~DataService_HandleAbort_pargs() throw();
  const TransactionId* tid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleAbort_result__isset {
  _DataService_HandleAbort_result__isset() : success(false) {}
  bool success :1;
} _DataService_HandleAbort_result__isset;

class DataService_HandleAbort_result {
 public:

  DataService_HandleAbort_result(const DataService_HandleAbort_result&);
  DataService_HandleAbort_result& operator=(const DataService_HandleAbort_result&);
  DataService_HandleAbort_result() {
  }

  virtual ~DataService_HandleAbort_result() throw();
  AbortReply success;

  _DataService_HandleAbort_result__isset __isset;

  void __set_success(const AbortReply& val);

  bool operator == (const DataService_HandleAbort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleAbort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleAbort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleAbort_presult__isset {
  _DataService_HandleAbort_presult__isset() : success(false) {}
  bool success :1;
} _DataService_HandleAbort_presult__isset;

class DataService_HandleAbort_presult {
 public:


  virtual ~DataService_HandleAbort_presult() throw();
  AbortReply* success;

  _DataService_HandleAbort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_HandleCommit_args__isset {
  _DataService_HandleCommit_args__isset() : tid(false), ts(false) {}
  bool tid :1;
  bool ts :1;
} _DataService_HandleCommit_args__isset;

class DataService_HandleCommit_args {
 public:

  DataService_HandleCommit_args(const DataService_HandleCommit_args&);
  DataService_HandleCommit_args& operator=(const DataService_HandleCommit_args&);
  DataService_HandleCommit_args() : tid(0), ts(0) {
  }

  virtual ~DataService_HandleCommit_args() throw();
  TransactionId tid;
  Timestamp ts;

  _DataService_HandleCommit_args__isset __isset;

  void __set_tid(const TransactionId val);

  void __set_ts(const Timestamp val);

  bool operator == (const DataService_HandleCommit_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(ts == rhs.ts))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleCommit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleCommit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_HandleCommit_pargs {
 public:


  virtual ~DataService_HandleCommit_pargs() throw();
  const TransactionId* tid;
  const Timestamp* ts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleCommit_result__isset {
  _DataService_HandleCommit_result__isset() : success(false) {}
  bool success :1;
} _DataService_HandleCommit_result__isset;

class DataService_HandleCommit_result {
 public:

  DataService_HandleCommit_result(const DataService_HandleCommit_result&);
  DataService_HandleCommit_result& operator=(const DataService_HandleCommit_result&);
  DataService_HandleCommit_result() {
  }

  virtual ~DataService_HandleCommit_result() throw();
  CommitReply success;

  _DataService_HandleCommit_result__isset __isset;

  void __set_success(const CommitReply& val);

  bool operator == (const DataService_HandleCommit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleCommit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleCommit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleCommit_presult__isset {
  _DataService_HandleCommit_presult__isset() : success(false) {}
  bool success :1;
} _DataService_HandleCommit_presult__isset;

class DataService_HandleCommit_presult {
 public:


  virtual ~DataService_HandleCommit_presult() throw();
  CommitReply* success;

  _DataService_HandleCommit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_HandleReadRequest_args__isset {
  _DataService_HandleReadRequest_args__isset() : tid(false), interval(false), k(false) {}
  bool tid :1;
  bool interval :1;
  bool k :1;
} _DataService_HandleReadRequest_args__isset;

class DataService_HandleReadRequest_args {
 public:

  DataService_HandleReadRequest_args(const DataService_HandleReadRequest_args&);
  DataService_HandleReadRequest_args& operator=(const DataService_HandleReadRequest_args&);
  DataService_HandleReadRequest_args() : tid(0), k() {
  }

  virtual ~DataService_HandleReadRequest_args() throw();
  TransactionId tid;
  TimestampInterval interval;
  Key k;

  _DataService_HandleReadRequest_args__isset __isset;

  void __set_tid(const TransactionId val);

  void __set_interval(const TimestampInterval& val);

  void __set_k(const Key& val);

  bool operator == (const DataService_HandleReadRequest_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(interval == rhs.interval))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleReadRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleReadRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_HandleReadRequest_pargs {
 public:


  virtual ~DataService_HandleReadRequest_pargs() throw();
  const TransactionId* tid;
  const TimestampInterval* interval;
  const Key* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleReadRequest_result__isset {
  _DataService_HandleReadRequest_result__isset() : success(false) {}
  bool success :1;
} _DataService_HandleReadRequest_result__isset;

class DataService_HandleReadRequest_result {
 public:

  DataService_HandleReadRequest_result(const DataService_HandleReadRequest_result&);
  DataService_HandleReadRequest_result& operator=(const DataService_HandleReadRequest_result&);
  DataService_HandleReadRequest_result() {
  }

  virtual ~DataService_HandleReadRequest_result() throw();
  ReadReply success;

  _DataService_HandleReadRequest_result__isset __isset;

  void __set_success(const ReadReply& val);

  bool operator == (const DataService_HandleReadRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleReadRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleReadRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleReadRequest_presult__isset {
  _DataService_HandleReadRequest_presult__isset() : success(false) {}
  bool success :1;
} _DataService_HandleReadRequest_presult__isset;

class DataService_HandleReadRequest_presult {
 public:


  virtual ~DataService_HandleReadRequest_presult() throw();
  ReadReply* success;

  _DataService_HandleReadRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_HandleWriteRequest_args__isset {
  _DataService_HandleWriteRequest_args__isset() : tid(false), interval(false), k(false), v(false) {}
  bool tid :1;
  bool interval :1;
  bool k :1;
  bool v :1;
} _DataService_HandleWriteRequest_args__isset;

class DataService_HandleWriteRequest_args {
 public:

  DataService_HandleWriteRequest_args(const DataService_HandleWriteRequest_args&);
  DataService_HandleWriteRequest_args& operator=(const DataService_HandleWriteRequest_args&);
  DataService_HandleWriteRequest_args() : tid(0), k(), v() {
  }

  virtual ~DataService_HandleWriteRequest_args() throw();
  TransactionId tid;
  TimestampInterval interval;
  Key k;
  Value v;

  _DataService_HandleWriteRequest_args__isset __isset;

  void __set_tid(const TransactionId val);

  void __set_interval(const TimestampInterval& val);

  void __set_k(const Key& val);

  void __set_v(const Value& val);

  bool operator == (const DataService_HandleWriteRequest_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(interval == rhs.interval))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleWriteRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleWriteRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_HandleWriteRequest_pargs {
 public:


  virtual ~DataService_HandleWriteRequest_pargs() throw();
  const TransactionId* tid;
  const TimestampInterval* interval;
  const Key* k;
  const Value* v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleWriteRequest_result__isset {
  _DataService_HandleWriteRequest_result__isset() : success(false) {}
  bool success :1;
} _DataService_HandleWriteRequest_result__isset;

class DataService_HandleWriteRequest_result {
 public:

  DataService_HandleWriteRequest_result(const DataService_HandleWriteRequest_result&);
  DataService_HandleWriteRequest_result& operator=(const DataService_HandleWriteRequest_result&);
  DataService_HandleWriteRequest_result() {
  }

  virtual ~DataService_HandleWriteRequest_result() throw();
  WriteReply success;

  _DataService_HandleWriteRequest_result__isset __isset;

  void __set_success(const WriteReply& val);

  bool operator == (const DataService_HandleWriteRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_HandleWriteRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_HandleWriteRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_HandleWriteRequest_presult__isset {
  _DataService_HandleWriteRequest_presult__isset() : success(false) {}
  bool success :1;
} _DataService_HandleWriteRequest_presult__isset;

class DataService_HandleWriteRequest_presult {
 public:


  virtual ~DataService_HandleWriteRequest_presult() throw();
  WriteReply* success;

  _DataService_HandleWriteRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_GarbageCollection_args__isset {
  _DataService_GarbageCollection_args__isset() : ts(false) {}
  bool ts :1;
} _DataService_GarbageCollection_args__isset;

class DataService_GarbageCollection_args {
 public:

  DataService_GarbageCollection_args(const DataService_GarbageCollection_args&);
  DataService_GarbageCollection_args& operator=(const DataService_GarbageCollection_args&);
  DataService_GarbageCollection_args() : ts(0) {
  }

  virtual ~DataService_GarbageCollection_args() throw();
  Timestamp ts;

  _DataService_GarbageCollection_args__isset __isset;

  void __set_ts(const Timestamp val);

  bool operator == (const DataService_GarbageCollection_args & rhs) const
  {
    if (!(ts == rhs.ts))
      return false;
    return true;
  }
  bool operator != (const DataService_GarbageCollection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_GarbageCollection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_GarbageCollection_pargs {
 public:


  virtual ~DataService_GarbageCollection_pargs() throw();
  const Timestamp* ts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_GarbageCollection_result__isset {
  _DataService_GarbageCollection_result__isset() : success(false) {}
  bool success :1;
} _DataService_GarbageCollection_result__isset;

class DataService_GarbageCollection_result {
 public:

  DataService_GarbageCollection_result(const DataService_GarbageCollection_result&);
  DataService_GarbageCollection_result& operator=(const DataService_GarbageCollection_result&);
  DataService_GarbageCollection_result() {
  }

  virtual ~DataService_GarbageCollection_result() throw();
  GCReply success;

  _DataService_GarbageCollection_result__isset __isset;

  void __set_success(const GCReply& val);

  bool operator == (const DataService_GarbageCollection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_GarbageCollection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_GarbageCollection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_GarbageCollection_presult__isset {
  _DataService_GarbageCollection_presult__isset() : success(false) {}
  bool success :1;
} _DataService_GarbageCollection_presult__isset;

class DataService_GarbageCollection_presult {
 public:


  virtual ~DataService_GarbageCollection_presult() throw();
  GCReply* success;

  _DataService_GarbageCollection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataServiceClient : virtual public DataServiceIf {
 public:
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void HandleAbort(AbortReply& _return, const TransactionId tid);
  void send_HandleAbort(const TransactionId tid);
  void recv_HandleAbort(AbortReply& _return);
  void HandleCommit(CommitReply& _return, const TransactionId tid, const Timestamp ts);
  void send_HandleCommit(const TransactionId tid, const Timestamp ts);
  void recv_HandleCommit(CommitReply& _return);
  void HandleReadRequest(ReadReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k);
  void send_HandleReadRequest(const TransactionId tid, const TimestampInterval& interval, const Key& k);
  void recv_HandleReadRequest(ReadReply& _return);
  void HandleWriteRequest(WriteReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v);
  void send_HandleWriteRequest(const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v);
  void recv_HandleWriteRequest(WriteReply& _return);
  void GarbageCollection(GCReply& _return, const Timestamp ts);
  void send_GarbageCollection(const Timestamp ts);
  void recv_GarbageCollection(GCReply& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_HandleAbort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HandleCommit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HandleReadRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HandleWriteRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GarbageCollection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataServiceProcessor(boost::shared_ptr<DataServiceIf> iface) :
    iface_(iface) {
    processMap_["HandleAbort"] = &DataServiceProcessor::process_HandleAbort;
    processMap_["HandleCommit"] = &DataServiceProcessor::process_HandleCommit;
    processMap_["HandleReadRequest"] = &DataServiceProcessor::process_HandleReadRequest;
    processMap_["HandleWriteRequest"] = &DataServiceProcessor::process_HandleWriteRequest;
    processMap_["GarbageCollection"] = &DataServiceProcessor::process_GarbageCollection;
  }

  virtual ~DataServiceProcessor() {}
};

class DataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataServiceProcessorFactory(const ::boost::shared_ptr< DataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataServiceIfFactory > handlerFactory_;
};

class DataServiceMultiface : virtual public DataServiceIf {
 public:
  DataServiceMultiface(std::vector<boost::shared_ptr<DataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataServiceIf> > ifaces_;
  DataServiceMultiface() {}
  void add(boost::shared_ptr<DataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void HandleAbort(AbortReply& _return, const TransactionId tid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HandleAbort(_return, tid);
    }
    ifaces_[i]->HandleAbort(_return, tid);
    return;
  }

  void HandleCommit(CommitReply& _return, const TransactionId tid, const Timestamp ts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HandleCommit(_return, tid, ts);
    }
    ifaces_[i]->HandleCommit(_return, tid, ts);
    return;
  }

  void HandleReadRequest(ReadReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HandleReadRequest(_return, tid, interval, k);
    }
    ifaces_[i]->HandleReadRequest(_return, tid, interval, k);
    return;
  }

  void HandleWriteRequest(WriteReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HandleWriteRequest(_return, tid, interval, k, v);
    }
    ifaces_[i]->HandleWriteRequest(_return, tid, interval, k, v);
    return;
  }

  void GarbageCollection(GCReply& _return, const Timestamp ts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GarbageCollection(_return, ts);
    }
    ifaces_[i]->GarbageCollection(_return, ts);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DataServiceConcurrentClient : virtual public DataServiceIf {
 public:
  DataServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void HandleAbort(AbortReply& _return, const TransactionId tid);
  int32_t send_HandleAbort(const TransactionId tid);
  void recv_HandleAbort(AbortReply& _return, const int32_t seqid);
  void HandleCommit(CommitReply& _return, const TransactionId tid, const Timestamp ts);
  int32_t send_HandleCommit(const TransactionId tid, const Timestamp ts);
  void recv_HandleCommit(CommitReply& _return, const int32_t seqid);
  void HandleReadRequest(ReadReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k);
  int32_t send_HandleReadRequest(const TransactionId tid, const TimestampInterval& interval, const Key& k);
  void recv_HandleReadRequest(ReadReply& _return, const int32_t seqid);
  void HandleWriteRequest(WriteReply& _return, const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v);
  int32_t send_HandleWriteRequest(const TransactionId tid, const TimestampInterval& interval, const Key& k, const Value& v);
  void recv_HandleWriteRequest(WriteReply& _return, const int32_t seqid);
  void GarbageCollection(GCReply& _return, const Timestamp ts);
  int32_t send_GarbageCollection(const Timestamp ts);
  void recv_GarbageCollection(GCReply& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
