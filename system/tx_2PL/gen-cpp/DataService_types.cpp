/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TxProtocol {

int _kOperationValues[] = {
  Operation::READ,
  Operation::WRITE
};
const char* _kOperationNames[] = {
  "READ",
  "WRITE"
};
const std::map<int, const char*> _Operation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOperationValues, _kOperationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOperationStateValues[] = {
  OperationState::FAIL_NO_VERSION,
  OperationState::R_LOCK_SUCCESS,
  OperationState::W_LOCK_SUCCESS,
  OperationState::FAIL_PENDING_LOCK,
  OperationState::FAIL_TIMEOUT,
  OperationState::COMMIT_OK,
  OperationState::ABORT_OK,
  OperationState::ERROR
};
const char* _kOperationStateNames[] = {
  "FAIL_NO_VERSION",
  "R_LOCK_SUCCESS",
  "W_LOCK_SUCCESS",
  "FAIL_PENDING_LOCK",
  "FAIL_TIMEOUT",
  "COMMIT_OK",
  "ABORT_OK",
  "ERROR"
};
const std::map<int, const char*> _OperationState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kOperationStateValues, _kOperationStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ReadReply::~ReadReply() throw() {
}


void ReadReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void ReadReply::__set_state(const OperationState::type val) {
  this->state = val;
}

void ReadReply::__set_key(const Key& val) {
  this->key = val;
}

void ReadReply::__set_value(const Value& val) {
  this->value = val;
}

uint32_t ReadReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->state = (OperationState::type)ecast0;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReadReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReadReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReadReply &a, ReadReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ReadReply::ReadReply(const ReadReply& other1) {
  tid = other1.tid;
  state = other1.state;
  key = other1.key;
  value = other1.value;
  __isset = other1.__isset;
}
ReadReply& ReadReply::operator=(const ReadReply& other2) {
  tid = other2.tid;
  state = other2.state;
  key = other2.key;
  value = other2.value;
  __isset = other2.__isset;
  return *this;
}
void ReadReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReadReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


WriteReply::~WriteReply() throw() {
}


void WriteReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void WriteReply::__set_state(const OperationState::type val) {
  this->state = val;
}

void WriteReply::__set_key(const Key& val) {
  this->key = val;
}

uint32_t WriteReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->state = (OperationState::type)ecast3;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WriteReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WriteReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WriteReply &a, WriteReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

WriteReply::WriteReply(const WriteReply& other4) {
  tid = other4.tid;
  state = other4.state;
  key = other4.key;
  __isset = other4.__isset;
}
WriteReply& WriteReply::operator=(const WriteReply& other5) {
  tid = other5.tid;
  state = other5.state;
  key = other5.key;
  __isset = other5.__isset;
  return *this;
}
void WriteReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ", " << "key=" << to_string(key);
  out << ")";
}


CommitReply::~CommitReply() throw() {
}


void CommitReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void CommitReply::__set_state(const OperationState::type val) {
  this->state = val;
}

uint32_t CommitReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->state = (OperationState::type)ecast6;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommitReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommitReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommitReply &a, CommitReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

CommitReply::CommitReply(const CommitReply& other7) {
  tid = other7.tid;
  state = other7.state;
  __isset = other7.__isset;
}
CommitReply& CommitReply::operator=(const CommitReply& other8) {
  tid = other8.tid;
  state = other8.state;
  __isset = other8.__isset;
  return *this;
}
void CommitReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


AbortReply::~AbortReply() throw() {
}


void AbortReply::__set_tid(const TransactionId val) {
  this->tid = val;
}

void AbortReply::__set_state(const OperationState::type val) {
  this->state = val;
}

uint32_t AbortReply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->state = (OperationState::type)ecast9;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AbortReply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortReply");

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortReply &a, AbortReply &b) {
  using ::std::swap;
  swap(a.tid, b.tid);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

AbortReply::AbortReply(const AbortReply& other10) {
  tid = other10.tid;
  state = other10.state;
  __isset = other10.__isset;
}
AbortReply& AbortReply::operator=(const AbortReply& other11) {
  tid = other11.tid;
  state = other11.state;
  __isset = other11.__isset;
  return *this;
}
void AbortReply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortReply(";
  out << "tid=" << to_string(tid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}

} // namespace
